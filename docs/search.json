[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "MLS Salaries",
    "section": "",
    "text": "This is an analysis of MLS Salary data from the MLS Players Association. They have published the data since 2007, but formats vary widely. There are other cleaning challenges tackled as well.\nThis is updated through the spring 2025 salart release.\nThe main notebooks are Cleaning and Analysis 2024. There are some other exploratory notebooks that are not yet included in findings below.\nThe code is public on Github. The published notebooks are on Quarto Pub.\n\n\n\nPlayers that were paid the most over time and recently\nTeams that spent the most over time and recently\nTop spending teams over the past several years\n\n\n\n\n\nIs it possible to compare club spending to season results? This will require more data and perhaps other packages.\n\n\n\n\n\n\nUpon his signing on July 2023, Lionel Messi became the highest paid player in the history of the Major League Soccer with a total compensation over $20 million. However, investing in players was not a new concept for Inter Miami CF, as they had been among the top spending teams since 2020, according to an analysis of player salaries.\nThe analysis was based on 2007-2024 player salary released by the Major League Soccer Player’s Association. It was not adjusted for inflation.\n\n\n\n\nLorenzo Insigne of Toronto started the 2023 season as the highest paid player at $15.5 million before Messi was signed that July. They were the only players earning more than $10 million within a year, and that still holds true in 2025.\nIt is no surprise that Inter Miami have had the highest team salary since 2023. Toronto has continued to rank second, with Lorenzo Insigne being a huge part of their salary spend.\nIn 2025, Inter Miami had three of the top 10 MLS earners on their roster. Toronto FC had two.\nIn 2025, 21 teams spent less on their total roster than Miami spent on Messi.\nLooking at the most expensive rosters in the MLS over time, Toronto FC has been the top-spending team seven times.\n\n\n\n\n\n\n\n\nTo publish to Quarto Pub, remove the output-dir designation from the _quarto.yml file.\nThis research from 2017 may prove interesting, but I haven’t done anything with it yet.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#summary-of-findings",
    "href": "index.html#summary-of-findings",
    "title": "MLS Salaries",
    "section": "",
    "text": "Upon his signing on July 2023, Lionel Messi became the highest paid player in the history of the Major League Soccer with a total compensation over $20 million. However, investing in players was not a new concept for Inter Miami CF, as they had been among the top spending teams since 2020, according to an analysis of player salaries.\nThe analysis was based on 2007-2024 player salary released by the Major League Soccer Player’s Association. It was not adjusted for inflation.\n\n\n\n\nLorenzo Insigne of Toronto started the 2023 season as the highest paid player at $15.5 million before Messi was signed that July. They were the only players earning more than $10 million within a year, and that still holds true in 2025.\nIt is no surprise that Inter Miami have had the highest team salary since 2023. Toronto has continued to rank second, with Lorenzo Insigne being a huge part of their salary spend.\nIn 2025, Inter Miami had three of the top 10 MLS earners on their roster. Toronto FC had two.\nIn 2025, 21 teams spent less on their total roster than Miami spent on Messi.\nLooking at the most expensive rosters in the MLS over time, Toronto FC has been the top-spending team seven times.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "index.html#notes-to-self",
    "href": "index.html#notes-to-self",
    "title": "MLS Salaries",
    "section": "",
    "text": "To publish to Quarto Pub, remove the output-dir designation from the _quarto.yml file.\nThis research from 2017 may prove interesting, but I haven’t done anything with it yet.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "02-pts-salary.html",
    "href": "02-pts-salary.html",
    "title": "Points vs salaries",
    "section": "",
    "text": "Warning\n\n\n\nThis notebook is just exploratory and a work in progress. There are no particular findings at this time.",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "02-pts-salary.html#goal-of-this-notebook",
    "href": "02-pts-salary.html#goal-of-this-notebook",
    "title": "Points vs salaries",
    "section": "Goal of this notebook",
    "text": "Goal of this notebook\nDoes spending more on players ensure a better season? I want to compare season points to salaries spent by MLS teams.\nI thought I had found some standings data on kaggle, but it only goes through part of 2021.\nI worked it out using 2020 data, but there is nothing to really show.",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "02-pts-salary.html#setup",
    "href": "02-pts-salary.html#setup",
    "title": "Points vs salaries",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(janitor)\noptions(dplyr.summarise.inform = FALSE)",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "02-pts-salary.html#download",
    "href": "02-pts-salary.html#download",
    "title": "Points vs salaries",
    "section": "Download",
    "text": "Download\nI scraped the MLS 2023 standings and put them in a Google Sheet where I hand-edited some columns to clean it up. (It was just quicker because of some non-consisten patterns in the scrapped team name.)\n\ndownload.file(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vQwM9NKGZEc5CKVR2z7IoEUq0nij77xNu6kz8Rua4JFNfqt0sOe5RaE8gwW2lZ0nSsAFH5aCNUQJrcV/pub?output=csv\", \"data-original/mls-standings-2023.csv\")\n\nI haven’t used this as of yet.",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "02-pts-salary.html#importing",
    "href": "02-pts-salary.html#importing",
    "title": "Points vs salaries",
    "section": "Importing",
    "text": "Importing\n\nmls_standings &lt;- read_csv(\"data-original/all_tables.csv\") |&gt; clean_names()\nmls_salaries &lt;- read_rds(\"data-processed/mls-salaries.rds\")\nmls_standings_2023 &lt;- read_csv(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vQwM9NKGZEc5CKVR2z7IoEUq0nij77xNu6kz8Rua4JFNfqt0sOe5RaE8gwW2lZ0nSsAFH5aCNUQJrcV/pub?output=csv\")",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "02-pts-salary.html#salaries",
    "href": "02-pts-salary.html#salaries",
    "title": "Points vs salaries",
    "section": "Salaries",
    "text": "Salaries\nStarting with salaries data since this is “cleaned” already.\n\nsal_20 &lt;- mls_salaries |&gt; \n  filter(year == \"2020\") |&gt; \n  group_by(club_long, conference) |&gt; \n  summarise(team_salary = sum(compensation))\n\nsal_20",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "02-pts-salary.html#standings",
    "href": "02-pts-salary.html#standings",
    "title": "Points vs salaries",
    "section": "Standings",
    "text": "Standings\nChecking what we have for standings data.\n\nmls_standings |&gt; \n  summarise(\n    yr_old = min(year),\n    yr_new = max(year)\n  )",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "02-pts-salary.html#trying-this-with-2020-anyway",
    "href": "02-pts-salary.html#trying-this-with-2020-anyway",
    "title": "Points vs salaries",
    "section": "Trying this with 2020 anyway",
    "text": "Trying this with 2020 anyway\n\nPeek at the data\n\nstd_20 &lt;- mls_standings |&gt; filter(year == \"2020\")\n\n\n\nCleaning names\nThere are some issues here with team names. There are notes on the names and some names are different than what is used with MLS Salaries.\n\nstd_20_clean &lt;- mls_standings |&gt; \n  filter(year == \"2020\", conference == \"Overall\") |&gt; \n  mutate(\n    team_clean = str_remove_all(team, regex(\"\\\\[.\\\\]|\\\\(.\\\\)\")) |&gt; str_trim(),\n    team_new = case_match(\n      team_clean,\n      \"Columbus Crew SC\" ~ \"Columbus Crew\",\n      \"Houston Dynamo\" ~ \"Houston Dynamo FC\",\n      \"Los Angeles FC\" ~ \"LAFC\",\n      \"Vancouver Whitecaps FC\" ~ \"Vancouver Whitecaps\",\n      .default = team_clean\n    )\n  ) |&gt;\n  arrange(team_new) |&gt; \n  distinct(team_new, pts)\n\n\nstd_20_clean",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "02-pts-salary.html#put-them-together",
    "href": "02-pts-salary.html#put-them-together",
    "title": "Points vs salaries",
    "section": "Put them together",
    "text": "Put them together\n\ncombined_20 &lt;- sal_20 |&gt; \n  left_join(std_20_clean, by = join_by(club_long == team_new)) |&gt; \n  drop_na()\n\ncombined_20",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "02-pts-salary.html#plot-the-relationship",
    "href": "02-pts-salary.html#plot-the-relationship",
    "title": "Points vs salaries",
    "section": "Plot the relationship",
    "text": "Plot the relationship\n\nggplot(combined_20) +\n  aes(x = pts, y = team_salary) +\n  geom_point(aes(color = conference), size = 4) +\n  # geom_text(aes(label = club_long)) +\n  ggrepel::geom_text_repel(aes(label = club_long), size = 3)\n\n\n\n\n\n\n\n\nThere isn’t one, really. At least not for this year. It’s also difficult to read.",
    "crumbs": [
      "Points vs salaries"
    ]
  },
  {
    "objectID": "01-cleaning.html",
    "href": "01-cleaning.html",
    "title": "Cleaning",
    "section": "",
    "text": "Our data all comes from the MLS Players Association but it was published in different formats throughout the years.\n\nWe are starting with some historical data already cleaned by Jeremy Singer-Vine for the Data is Plural newsletter: Github archive. It goes from 2007 to 2017.\n\nIt’s interesting that the DIP PDF for 2017 is different from what I downloaded from the MLSPA site. It appears to have pool MLS players that the downloaded PDFs do not.\n\nI used Tablula to convert 2018 to 2021 data from PDF into CSVs. The data won’t have headers and each file is a little different.\nThe 2022 is available as an Excel file. It did need cleaning.\nThe May version of 2023 data came in Excel, but the September 2023 update was published as a PDF and also as an HTML table that I was able to collect through browser-based scraper.\nThe early 2024 version was released as a CSV and an HTML table. I scraped the HTML table and created an Excel file because it had a player not listed in the csv file.\n\nOnce all the data was imported, I still needed to do some normalization:\n\nAll columns needed the same datatype, etc.\nWe needed to normalize team names. Sometimes team initials are used, and other times full names are used. I wanted both. I used this data to build a complete reference file in Google Sheets and the re-updated the data with that. I also consulted usfootballr for how names and abbreviations were used in hopes of joining with data from that package.\nI wanted to add conference affiliations, which I did manually in the Google Sheet reference.\nI normalized positions with preference for letter designations using hyphens for multi-position players.\n\n\n\n\nI need to double-check all the conference designations before I actually use them.\nI might add color values to the Google Sheet reference since all the packages I’ve checked have been out of date.",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#goals-of-this-notebook",
    "href": "01-cleaning.html#goals-of-this-notebook",
    "title": "Cleaning",
    "section": "",
    "text": "Our data all comes from the MLS Players Association but it was published in different formats throughout the years.\n\nWe are starting with some historical data already cleaned by Jeremy Singer-Vine for the Data is Plural newsletter: Github archive. It goes from 2007 to 2017.\n\nIt’s interesting that the DIP PDF for 2017 is different from what I downloaded from the MLSPA site. It appears to have pool MLS players that the downloaded PDFs do not.\n\nI used Tablula to convert 2018 to 2021 data from PDF into CSVs. The data won’t have headers and each file is a little different.\nThe 2022 is available as an Excel file. It did need cleaning.\nThe May version of 2023 data came in Excel, but the September 2023 update was published as a PDF and also as an HTML table that I was able to collect through browser-based scraper.\nThe early 2024 version was released as a CSV and an HTML table. I scraped the HTML table and created an Excel file because it had a player not listed in the csv file.\n\nOnce all the data was imported, I still needed to do some normalization:\n\nAll columns needed the same datatype, etc.\nWe needed to normalize team names. Sometimes team initials are used, and other times full names are used. I wanted both. I used this data to build a complete reference file in Google Sheets and the re-updated the data with that. I also consulted usfootballr for how names and abbreviations were used in hopes of joining with data from that package.\nI wanted to add conference affiliations, which I did manually in the Google Sheet reference.\nI normalized positions with preference for letter designations using hyphens for multi-position players.\n\n\n\n\nI need to double-check all the conference designations before I actually use them.\nI might add color values to the Google Sheet reference since all the packages I’ve checked have been out of date.",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#setup",
    "href": "01-cleaning.html#setup",
    "title": "Cleaning",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(readxl)\nlibrary(janitor)\nlibrary(teamcolors)",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#import-the-archive-data",
    "href": "01-cleaning.html#import-the-archive-data",
    "title": "Cleaning",
    "section": "Import the archive data",
    "text": "Import the archive data\nThis brings in the Data is Plural files, which should all be the same.\n\ndip_data &lt;- read_csv(c(\n  \"data-processed/data-is-plural/mls-salaries-2007.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2008.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2009.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2010.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2011.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2012.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2013.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2014.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2015.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2016.csv\",\n  \"data-processed/data-is-plural/mls-salaries-2017.csv\"),\n  id = \"file_name\"\n) |&gt; \n  mutate(\n    year = str_sub(file_name, 44, 47)\n  ) |&gt; \n  relocate(year) |&gt; # moving year to front\n  select(!file_name) |&gt;  # dropping file_name\n  rename(club_short = club)\n\nRows: 5553 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): club, last_name, first_name, position\ndbl (2): base_salary, guaranteed_compensation\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# peek\ndip_data |&gt; head()\n\n\n  \n\n\n\n\nCleaning club abbeviations\nThere are times when club abbreviations vary. We fix those here.\nChecking them:\n\ndip_data |&gt; \n  count(club_short)\n\n\n  \n\n\n\nLooking through this, I want to make a number of changes. I also ended up checking the usfootballR package for how they do abbreviations. Using SKC for historical data since it was the same club that changed names.\n\ndip_changed &lt;- dip_data |&gt; \n  mutate(\n    club_short_clean = recode(\n      club_short,\n      \"KC\" = \"SKC\",\n      \"MNUFC\" = \"MIN\",\n      \"TFC\" = \"TOR\",\n      \"NYRB\" = \"NY\",\n      \"NYCFC\" = \"NYC\",\n      \"None\" = NULL,\n      \"POOL\" = \"MLS\",\n      \"Pool\" = \"MLS\"\n    )\n  )\n\nChecking the changes to make sure they are right.\n\ndip_changed |&gt; \n  count(club_short, club_short_clean)\n\n\n  \n\n\n\n\n\nCleaning column names for DIP files\n\ndip_cleaned &lt;- dip_changed |&gt; \n  select(!club_short) |&gt; \n  rename(club_short = club_short_clean) |&gt; \n  relocate(year, club_short)\n\ndip_cleaned |&gt; head()",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#cleaning-tabula-conversions",
    "href": "01-cleaning.html#cleaning-tabula-conversions",
    "title": "Cleaning",
    "section": "Cleaning Tabula conversions",
    "text": "Cleaning Tabula conversions\nEach of these files from years 2018 to 2021 will have different issues.\n\n2018 salaries\nFor this one, the dollar signs came in as their own column, which was actually helpful so the numbers were actually numbers. I also need to add the year.\n\ns2018_imported &lt;- read_csv(\n  \"data-original/tabula-2018-09-15-Salary-Information-Alphabetical.csv\",\n  col_names = c(\n    \"club_long\",\n    \"last_name\",\n    \"first_name\",\n    \"position\",\n    \"currency_1\",\n    \"base_salary\",\n    \"currency_2\",\n    \"guaranteed_compensation\"\n  )\n) |&gt; \n  select(!starts_with(\"currency\")) |&gt; # removes dollar signs\n  add_column(year = \"2018\", .before = \"club_long\")\n\nRows: 694 Columns: 8\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): club_long, last_name, first_name, position, currency_1, currency_2\nnum (2): base_salary, guaranteed_compensation\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ns2018_imported |&gt; head()\n\n\n  \n\n\n\n\n\n2019 salaries\nFor this one, our salaries come in with $ in the salary fields, and also with a trailing space and ). We import those a “raw” versions and clean them before using type_convert() to have dplyr try to type them again, changing them to numberic. For some reason I couldn’t just convert to as.numeric() even after it was cleaned up as they came up NA. I also add the year.\n\ns2019_imported &lt;- read_csv(\n  \"data-original/tabula-2019-Salary-List-Fall-Release-FINAL-Salary-List-Fall-Release-MLS.csv\",\n  col_names = c(\n    \"club_long\",\n    \"last_name\",\n    \"first_name\",\n    \"position\",\n    \"base_salary_raw\",\n    \"guaranteed_compensation_raw\"\n  )\n) |&gt; \n  mutate(\n    base_salary = str_remove_all(base_salary_raw, \"[\\\\)\\\\$]\") |&gt; str_trim(),\n    guaranteed_compensation = str_remove_all(guaranteed_compensation_raw, \"[\\\\)\\\\$]\") |&gt; str_trim()\n  ) |&gt; \n  type_convert() |&gt; \n  select(!ends_with(\"raw\")) |&gt; \n  add_column(year = \"2019\", .before = \"club_long\")\n\nRows: 714 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): club_long, last_name, first_name, position, base_salary_raw, guaran...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  club_long = col_character(),\n  last_name = col_character(),\n  first_name = col_character(),\n  position = col_character(),\n  base_salary_raw = col_character(),\n  guaranteed_compensation_raw = col_character(),\n  base_salary = col_number(),\n  guaranteed_compensation = col_number()\n)\n\ns2019_imported |&gt; head()\n\n\n  \n\n\n\n\n\n2020 salaries\n\ns2020_imported &lt;- read_csv(\n  \"data-original/tabula-2020-Fall-Winter-Salary-List-alphabetical.csv\",\n  col_names = c(\n    \"last_name\",\n    \"first_name\",\n    \"club_long\",\n    \"position\",\n    \"base_salary_raw\",\n    \"guaranteed_compensation_raw\"\n  )\n) |&gt; \n  mutate(\n    base_salary = str_remove(base_salary_raw, \"\\\\$\"),\n    guaranteed_compensation = str_remove(guaranteed_compensation_raw, \"\\\\$\"),\n  ) |&gt; \n  select(!ends_with(\"raw\")) |&gt; \n  type_convert() |&gt; \n  add_column(year = \"2020\", .before = \"last_name\")\n\nRows: 778 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): last_name, first_name, club_long, position, base_salary_raw, guaran...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  last_name = col_character(),\n  first_name = col_character(),\n  club_long = col_character(),\n  position = col_character(),\n  base_salary = col_number(),\n  guaranteed_compensation = col_number()\n)\n\ns2020_imported |&gt; head()\n\n\n  \n\n\n\n\n\n2021 salaries\n\ns2021_imported &lt;- read_csv(\n  \"data-original/tabula-2021-MLSPA-Fall-Salary-release (1).csv\",\n  col_names = c(\n    \"club_long\",\n    \"last_name\",\n    \"first_name\",\n    \"position\",\n    \"base_salary_raw\",\n    \"guaranteed_compensation_raw\"\n  )\n) |&gt; \n  mutate(\n    base_salary = str_remove(base_salary_raw, \"\\\\$\"),\n    guaranteed_compensation = str_remove(guaranteed_compensation_raw, \"\\\\$\"),\n  ) |&gt; \n  select(!ends_with(\"raw\")) |&gt; \n  type_convert() |&gt; \n  add_column(year = \"2021\", .before = \"club_long\")\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 871 Columns: 6\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): club_long, last_name, first_name, position, base_salary_raw, guaran...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  club_long = col_character(),\n  last_name = col_character(),\n  first_name = col_character(),\n  position = col_character(),\n  base_salary = col_number(),\n  guaranteed_compensation = col_number()\n)\n\ns2021_imported |&gt; head()",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#import-excel-data",
    "href": "01-cleaning.html#import-excel-data",
    "title": "Cleaning",
    "section": "Import excel data",
    "text": "Import excel data\n\n2022 data\n\ns2022_imported &lt;- read_excel(\"data-original/MLS Salary 2022.xlsx\") |&gt; clean_names() |&gt; \n  add_column(year = \"2022\", .before = \"first_name\") |&gt; \n  rename(position = position_s,\n         club_long = club)\n\ns2022_imported |&gt; glimpse()\n\nRows: 841\nColumns: 7\n$ year                    &lt;chr&gt; \"2022\", \"2022\", \"2022\", \"2022\", \"2022\", \"2022\"…\n$ first_name              &lt;chr&gt; \"Artur\", \"Nanú\", \"Zeca\", \"Luquinhas\", \"Judson\"…\n$ last_name               &lt;chr&gt; NA, NA, NA, NA, NA, NA, \"Ågren\", \"Aaronson\", \"…\n$ club_long               &lt;chr&gt; \"Columbus Crew\", \"FC Dallas\", \"Houston Dynamo\"…\n$ position                &lt;chr&gt; \"M\", \"D\", \"D\", \"F\", \"M\", \"D\", \"D\", \"M\", \"D\", \"…\n$ base_salary             &lt;dbl&gt; 564000, 600000, 218182, 1050000, 420000, 40000…\n$ guaranteed_compensation &lt;dbl&gt; 615633, 668750, 259015, 1173125, 425000, 42875…\n\n\n\n\n2023 data\nThe first version for 2023 was available as an Excel file. However, there was an update in September of 2023 that was available for download as a PDF (saved in data-original) but also published as an HTML table that I was able to use a browser-based scraper to create an Excel file. It is this Excel file that I’m using.\n\ns2023_imported &lt;- read_excel(\"data-original/2023-Salary-Report-as-of-Sept-15-2023.xlsx\") |&gt; clean_names() |&gt; \n  add_column(year = \"2023\", .before = \"first_name\") |&gt; \n  rename(position = position_s,\n         club_long = club)\n\ns2023_imported |&gt; glimpse()\n\nRows: 924\nColumns: 7\n$ year                    &lt;chr&gt; \"2023\", \"2023\", \"2023\", \"2023\", \"2023\", \"2023\"…\n$ first_name              &lt;chr&gt; \"Luis\", \"Lalas\", \"Nicolás\", \"Alonso\", \"Ifunany…\n$ last_name               &lt;chr&gt; \"Abram\", \"Abubakar\", \"Acevedo\", \"Aceves\", \"Ach…\n$ club_long               &lt;chr&gt; \"Atlanta United\", \"Colorado Rapids\", \"New York…\n$ position                &lt;chr&gt; \"D\", \"D\", \"D-M\", \"D\", \"F\", \"D-M\", \"M\", \"M-F\", …\n$ base_salary             &lt;dbl&gt; 556364, 665000, 230000, 330000, 85444, 1250000…\n$ guaranteed_compensation &lt;dbl&gt; 695977, 702125, 274800, 368900, 85444, 1365000…\n\n\n\n\n2024 data\nThe 2024 data was downloaded from MLSPA in Jan. 2025 but the file appears to be a Oct. 24, 2024 export, being after the official Sept. 13th release of the fall report.\n\ns2024_imported &lt;- read_csv(\"data-original/Salary-Release-FALL-2024_241024_164547.txt\") |&gt; clean_names() |&gt; \n  rename(\n    first_name = fname,\n    last_name = lname,\n    club_long = club,\n    guaranteed_compensation = cy_guaranteed_comp,\n    base_salary = cy_base_salary\n  ) |&gt; \n  add_column(year = \"2024\", .before = \"first_name\") |&gt;\n  mutate(across(7:8, parse_number)) |&gt; \n  select(-num)\n\nRows: 910 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (6): fname, lname, club, position, CY Base Salary, CY Guaranteed Comp\ndbl (1): Num\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\ns2024_imported |&gt; glimpse()\n\nRows: 910\nColumns: 7\n$ year                    &lt;chr&gt; \"2024\", \"2024\", \"2024\", \"2024\", \"2024\", \"2024\"…\n$ first_name              &lt;chr&gt; \"Aleksey\", \"Matthew\", \"Pedro\", \"Daniel\", \"Stia…\n$ last_name               &lt;chr&gt; \"Miranchuk\", \"Edwards\", \"Amador\", \"Ríos\", \"Gre…\n$ club_long               &lt;chr&gt; \"Atlanta United\", \"Atlanta United\", \"Atlanta U…\n$ position                &lt;chr&gt; \"Attacking Midfield\", \"Center-back\", \"Left-bac…\n$ base_salary             &lt;dbl&gt; 2400000, 71401, 207000, 89716, 1000000, 225000…\n$ guaranteed_compensation &lt;dbl&gt; 3685441, 71401, 242612, 126383, 1120000, 25625…\n\n\n\n\n2025 data\nIn June 2025 the MLSPA released their initial salary report “as of May 23, 2025”. The data was scraped from the online table, though I did also download the PDF.\n\ns2025_imported &lt;- read_excel(\"data-original/2025-Spring-Salary-Release.xlsx\") |&gt; \n  clean_names() |&gt; \n  rename(\n    club_long = club,\n    position = position_s\n  ) |&gt; \n  add_column(year = \"2025\", .before = \"first_name\")\n\n\ns2025_imported",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#merge-non-dip-data",
    "href": "01-cleaning.html#merge-non-dip-data",
    "title": "Cleaning",
    "section": "Merge non-dip data",
    "text": "Merge non-dip data\nThe tabula and excel data both use long club names, so I’ll put those together.\n\nnon_dip_data &lt;- s2018_imported |&gt; \n  bind_rows(s2019_imported, s2020_imported, s2021_imported, s2022_imported, s2023_imported, s2024_imported, s2025_imported)\n\nnon_dip_data |&gt; glimpse()\n\nRows: 6,634\nColumns: 7\n$ year                    &lt;chr&gt; \"2018\", \"2018\", \"2018\", \"2018\", \"2018\", \"2018\"…\n$ club_long               &lt;chr&gt; \"New York Red Bulls\", \"New York City FC\", \"Col…\n$ last_name               &lt;chr&gt; \"Abang\", \"Abdul-Salaam\", \"Abu\", \"Abubakar\", \"A…\n$ first_name              &lt;chr&gt; \"Anatole\", \"Saad\", \"Mohammed\", \"Lalas\", \"David…\n$ position                &lt;chr&gt; \"F\", \"D\", \"M\", \"D\", \"F-M\", \"M\", \"F-M\", \"M\", \"M…\n$ base_salary             &lt;dbl&gt; 68927.00, 106480.00, 175008.00, 68250.04, 1250…\n$ guaranteed_compensation &lt;dbl&gt; 68927.00, 120230.00, 181258.00, 75750.04, 1250…",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#cleaning-long-names-in-non-dip-data",
    "href": "01-cleaning.html#cleaning-long-names-in-non-dip-data",
    "title": "Cleaning",
    "section": "Cleaning long names in non-dip data",
    "text": "Cleaning long names in non-dip data\nChecking the names for errors.\n\nnon_dip_data |&gt; \n  count(club_long)\n\n\n  \n\n\n\nSome things of note:\n\n2021 New England Revolution may be missing last n.\nMontreal should probably be CF Montréal\n“MLS Pool” changed to “Major League Soccer” for consistency\n\nThere are other changes as well based on usfootballR package, etc.\n\nnon_dip_changed &lt;- non_dip_data |&gt; \n  mutate(\n    club_long_changed = case_match(\n      club_long,\n      \"Atlanta United\" ~ \"Atlanta United FC\",\n      \"Chicago Fire\" ~ \"Chicago Fire FC\",\n      \"Houston Dynamo\" ~ \"Houston Dynamo FC\",\n      \"CF Montreal\" ~ \"CF Montréal\",\n      \"Montreal\" ~ \"CF Montréal\",\n      # \"Montreal Impact\" ~ \"CF Montréal\",\n      \"Inter Miami\" ~ \"Inter Miami CF\",\n      \"New England Revolutio\" ~ \"New England Revolution\",\n      \"DC United\" ~ \"D.C. United\",\n      \"St. Louis City SC\" ~ \"St. Louis CITY SC\",\n      \"Minnesota United\" ~ \"Minnesota United FC\",\n      \"MLS Pool\" ~ \"Major League Soccer\",\n      .default = club_long\n    )\n  )\n\nnon_dip_changed  |&gt; \n  count(club_long, club_long_changed)\n\n\n  \n\n\n\nNow we’ll fix up the columns.\n\nnon_dip_cleaned &lt;- non_dip_changed |&gt; \n  select(-club_long) |&gt; \n  rename(club_long = club_long_changed) |&gt; \n  relocate(year, club_long)\n\nnon_dip_cleaned |&gt; glimpse()\n\nRows: 6,634\nColumns: 7\n$ year                    &lt;chr&gt; \"2018\", \"2018\", \"2018\", \"2018\", \"2018\", \"2018\"…\n$ club_long               &lt;chr&gt; \"New York Red Bulls\", \"New York City FC\", \"Col…\n$ last_name               &lt;chr&gt; \"Abang\", \"Abdul-Salaam\", \"Abu\", \"Abubakar\", \"A…\n$ first_name              &lt;chr&gt; \"Anatole\", \"Saad\", \"Mohammed\", \"Lalas\", \"David…\n$ position                &lt;chr&gt; \"F\", \"D\", \"M\", \"D\", \"F-M\", \"M\", \"F-M\", \"M\", \"M…\n$ base_salary             &lt;dbl&gt; 68927.00, 106480.00, 175008.00, 68250.04, 1250…\n$ guaranteed_compensation &lt;dbl&gt; 68927.00, 120230.00, 181258.00, 75750.04, 1250…",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#building-both-names",
    "href": "01-cleaning.html#building-both-names",
    "title": "Cleaning",
    "section": "Building both names",
    "text": "Building both names\nI’d like to have club_long and club_short for each row of data, but to do that I need to build a conversion chart of some kind.\nIt is club_short that I’d like to be consistent for a market, where club_long changes as branding changes.\nHow I tackled this:\n\nGet a list of all the short names\nGet a list of all the long names\nAdd them both to a Google Sheet and match them manually\nDownload that sheet and then use joins to fill gaps\n\nI used the following to get the names, though just to copy into a spreadsheet for a lot of manual research and work.\n\nclubs_short &lt;- dip_cleaned |&gt; distinct(year, club_short) |&gt; \n  arrange(year, club_short)\n\n# clubs_short |&gt; clipr::write_clip()\n\nclubs_long &lt;- non_dip_data |&gt; distinct(year, club_long) |&gt; \n  arrange(year, club_long)\n\n# clubs_long |&gt; clipr::write_clip()\n\n\nDownloading in the spreadsheet\nThe edited Google Sheet is here: rws-mls-salaries\nDownload the clubs list. Commented out after saved locally. Then viewed club names to verify/check them.\n\n# download.file(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vQqXJxbbrBsikirZrGyXYV_G6cFZp_dYmcf52UfSYM7Kw3akGlkO5jKP8ZL8WtRA5qUJgFMNPG8JYov/pub?output=csv\", \"data-processed/clubs-list.csv\")\n\nclubs_list &lt;- read_csv(\"data-processed/clubs-list.csv\") |&gt; \n  mutate(year = as.character(year))\n\nRows: 440 Columns: 4\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): club_short, club_long, conference\ndbl (1): year\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nclubs_list |&gt; \n  count(club_short, club_long)\n\n\n  \n\n\n\n\nFill in our DIP\nThe DIP data doesn’t have club_long. We’ll join with our master clubs list to get them.\n\ndip_full &lt;- dip_cleaned |&gt; \n  left_join(clubs_list, join_by(year == year, club_short == club_short))\n\ndip_full |&gt; head()\n\n\n  \n\n\n\nCheck for those that did not get a long name to see why.\n\ndip_full |&gt; \n  filter(is.na(club_long))\n\n\n  \n\n\n\nThese players are not attached to teams.\n\n\nFill in non-dip\nThe non-DIP data doesn’t have the short name, so we join with clubs_list reference file for them.\n\nnon_dip_full &lt;- non_dip_cleaned |&gt; \n  left_join(clubs_list, join_by(year == year, club_long == club_long))\n\nnon_dip_full |&gt; head()\n\n\n  \n\n\n\nCheck those that did not get a short name to research why.\n\nnon_dip_full |&gt; \n  filter(is.na(club_short))",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#merge-all-the-versions-together",
    "href": "01-cleaning.html#merge-all-the-versions-together",
    "title": "Cleaning",
    "section": "Merge all the versions together",
    "text": "Merge all the versions together\n\nbinded &lt;- dip_full |&gt; \n  bind_rows(non_dip_full) |&gt; \n  select(\n    year,\n    club_short,\n    last_name,\n    first_name,\n    position,\n    base_salary,\n    compensation = guaranteed_compensation,\n    club_long,\n    conference\n  )\n\nbinded |&gt; glimpse()\n\nRows: 12,187\nColumns: 9\n$ year         &lt;chr&gt; \"2007\", \"2007\", \"2007\", \"2007\", \"2007\", \"2007\", \"2007\", \"…\n$ club_short   &lt;chr&gt; \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"…\n$ last_name    &lt;chr&gt; \"Armas\", \"Banner\", \"Barrett\", \"Blanco\", \"Brown\", \"Busch\",…\n$ first_name   &lt;chr&gt; \"Chris\", \"Michael\", \"Chad\", \"Cuauhtemoc\", \"C.J.\", \"Jon\", …\n$ position     &lt;chr&gt; \"M\", \"M\", \"F\", \"F\", \"D\", \"GK\", \"F\", \"D\", \"M\", \"D\", \"D\", \"…\n$ base_salary  &lt;dbl&gt; 225000.0, 12900.0, 41212.5, 2492316.0, 106391.0, 58008.0,…\n$ compensation &lt;dbl&gt; 225000.0, 12900.0, 48712.5, 2666778.0, 106391.0, 58008.0,…\n$ club_long    &lt;chr&gt; \"Chicago Fire FC\", \"Chicago Fire FC\", \"Chicago Fire FC\", …\n$ conference   &lt;chr&gt; \"Eastern\", \"Eastern\", \"Eastern\", \"Eastern\", \"Eastern\", \"E…",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#clean-positions",
    "href": "01-cleaning.html#clean-positions",
    "title": "Cleaning",
    "section": "Clean positions",
    "text": "Clean positions\nPeek at the positions.\n\nbinded |&gt; \n  count(position)\n\n\n  \n\n\n## Help to get me a list of positions\n# binded |&gt; distinct(position) |&gt; pull() |&gt; clipr::write_clip()\n\nIt’s clear some cleanup is needed, and will take some decisions. I’m going to go with letter designations with hyphens when necessary. Some of these are subjective or don’t make sense, so I just have to make judgment calls.\n\npositions &lt;- binded |&gt; \n  mutate(\n    position_new = \n    case_match(\n      position,\n      # \"M\" ~ \"\",\n      # \"F\" ~ \"\",\n      # \"D\" ~ \"\",\n      # \"GK\" ~ \"\",\n      # \"D-M\" ~ \"\",\n      \"F-D\" ~ \"D\", # Bobby Burling was a defender\n      # \"F-M\" ~ \"\",\n      # \"M-D\" ~ \"\",\n      # \"M-F\" ~ \"\",\n      \"D-F\" ~ \"D\", # James Riley\n      \"MF\" ~ \"M-F\",\n      \"M/F\" ~ \"M-F\",\n      \"M/D\" ~ \"M-D\",\n      \"D/M\" ~ \"D-M\",\n      \"D/F\" ~ \"F\", # Andrew Wenger\n      \"F/M\" ~ \"M-F\",\n      # \"NA\" ~ \"\",\n      \"Attacking Midfield\" ~ \"M-F\",\n      \"Center-back\" ~ \"D\",\n      \"Center-Back\" ~ \"D\",\n      \"Center Forward\" ~ \"F\",\n      \"Central Midfield\" ~ \"M\",\n      \"Defender\" ~ \"D\",\n      \"Defensive Midfield\" ~ \"D-M\",\n      \"Forward\" ~ \"F\",\n      \"Goalkeeper\" ~ \"GK\",\n      \"Left-back\" ~ \"D\",\n      \"Left Wing\" ~ \"M-F\",\n      \"Left Midfield\" ~ \"M\",\n      \"Midfielder\" ~ \"M\",\n      \"Right-back\" ~ \"F\",\n      \"Right Midfield\" ~ \"M\",\n      \"Right Wing\" ~ \"M-F\",\n      .default = position\n    )\n  )\n\npositions |&gt; \n  count(position, position_new)\n\n\n  \n\n\n\nClean up the columns\n\npositions_fixed &lt;- positions |&gt; \n  select(!position) |&gt; \n  rename(position = position_new) |&gt; \n  relocate(position, .after = first_name)\n\npositions_fixed",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "01-cleaning.html#export-the-cleaned-data",
    "href": "01-cleaning.html#export-the-cleaned-data",
    "title": "Cleaning",
    "section": "Export the cleaned data",
    "text": "Export the cleaned data\nAssign last cleaning dataframe and export\n\nmls_salaries &lt;- positions_fixed |&gt; \n  arrange(year, club_short, last_name, first_name)\n\nmls_salaries |&gt; write_rds(\"data-processed/mls-salaries.rds\")",
    "crumbs": [
      "Cleaning"
    ]
  },
  {
    "objectID": "02-analysis.html",
    "href": "02-analysis.html",
    "title": "Analysis 2025",
    "section": "",
    "text": "Important\n\n\n\nThis analysis is through the Spring 2025 data release by the MLSPA.\n\n\nWe’ll explore MLS Salaries through history. We’ll start with the most recent data, then look back historically. A couple of questions that come to mind:\n\nWhich players are getting paid the most this year?\nWhich teams have the highest salary bill this year?\nHow do team salary rankings compare over time?\n\nPer the MLS Player’s Association, “compensation” is: The Annual Average Guaranteed Compensation (Guaranteed Comp) number includes a player’s base salary and all signing and guaranteed bonuses annualized over the term of the player’s contract, including option years.",
    "crumbs": [
      "Analysis 2025"
    ]
  },
  {
    "objectID": "02-analysis.html#goals-of-this-notebook",
    "href": "02-analysis.html#goals-of-this-notebook",
    "title": "Analysis 2025",
    "section": "",
    "text": "Important\n\n\n\nThis analysis is through the Spring 2025 data release by the MLSPA.\n\n\nWe’ll explore MLS Salaries through history. We’ll start with the most recent data, then look back historically. A couple of questions that come to mind:\n\nWhich players are getting paid the most this year?\nWhich teams have the highest salary bill this year?\nHow do team salary rankings compare over time?\n\nPer the MLS Player’s Association, “compensation” is: The Annual Average Guaranteed Compensation (Guaranteed Comp) number includes a player’s base salary and all signing and guaranteed bonuses annualized over the term of the player’s contract, including option years.",
    "crumbs": [
      "Analysis 2025"
    ]
  },
  {
    "objectID": "02-analysis.html#setup",
    "href": "02-analysis.html#setup",
    "title": "Analysis 2025",
    "section": "Setup",
    "text": "Setup\n\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(scales)\nlibrary(ggrepel)\nlibrary(DT)\n\noptions(dplyr.summarise.inform = FALSE)\noptions(scipen = 999)",
    "crumbs": [
      "Analysis 2025"
    ]
  },
  {
    "objectID": "02-analysis.html#import",
    "href": "02-analysis.html#import",
    "title": "Analysis 2025",
    "section": "Import",
    "text": "Import\n\nCleaned salary data\n\nsalaries &lt;- read_rds(\"data-processed/mls-salaries.rds\")\n\nsalaries |&gt; glimpse()\n\nRows: 12,187\nColumns: 9\n$ year         &lt;chr&gt; \"2007\", \"2007\", \"2007\", \"2007\", \"2007\", \"2007\", \"2007\", \"…\n$ club_short   &lt;chr&gt; \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"…\n$ last_name    &lt;chr&gt; \"Armas\", \"Banner\", \"Barrett\", \"Blanco\", \"Brown\", \"Busch\",…\n$ first_name   &lt;chr&gt; \"Chris\", \"Michael\", \"Chad\", \"Cuauhtemoc\", \"C.J.\", \"Jon\", …\n$ position     &lt;chr&gt; \"M\", \"M\", \"F\", \"F\", \"D\", \"GK\", \"F\", \"D\", \"M\", \"D\", \"D\", \"…\n$ base_salary  &lt;dbl&gt; 225000.0, 12900.0, 41212.5, 2492316.0, 106391.0, 58008.0,…\n$ compensation &lt;dbl&gt; 225000.0, 12900.0, 48712.5, 2666778.0, 106391.0, 58008.0,…\n$ club_long    &lt;chr&gt; \"Chicago Fire FC\", \"Chicago Fire FC\", \"Chicago Fire FC\", …\n$ conference   &lt;chr&gt; \"Eastern\", \"Eastern\", \"Eastern\", \"Eastern\", \"Eastern\", \"E…\n\n\n\n\nTeam colors data\nYou can see in MLS colors how I manually built these colors (and why).\n\n# download.file(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vQqXJxbbrBsikirZrGyXYV_G6cFZp_dYmcf52UfSYM7Kw3akGlkO5jKP8ZL8WtRA5qUJgFMNPG8JYov/pub?output=csv&&gid=1348329208\", \"data-processed/clubs-colors.csv\")\n\nmls_colors_data &lt;- read_csv(\"data-processed/clubs-colors.csv\")\n\nRows: 30 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): club_short, club_long, primary_color, secondary_color, tertiary_col...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmls_colors_data |&gt; glimpse()\n\nRows: 30\nColumns: 7\n$ club_short      &lt;chr&gt; \"ATL\", \"ATX\", \"CHI\", \"CIN\", \"CLB\", \"CLT\", \"COL\", \"DAL\"…\n$ club_long       &lt;chr&gt; \"Atlanta United FC\", \"Austin FC\", \"Chicago Fire FC\", \"…\n$ primary_color   &lt;chr&gt; \"#80000a\", \"#00b140\", \"#FF0000\", \"#F05323\", \"#FEDD00\",…\n$ secondary_color &lt;chr&gt; \"#221f1f\", \"#000000\", \"#141946\", \"#263B80\", \"#000000\",…\n$ tertiary_color  &lt;chr&gt; \"#a19060\", \"#FFFFFF\", \"#7CCDEF\", NA, NA, NA, \"#D3D5D7\"…\n$ favored_color   &lt;chr&gt; \"#80000a\", \"#00b140\", \"#7CCDEF\", \"#F05323\", \"#FEDD00\",…\n$ favored_nohex   &lt;chr&gt; \"80000a\", \"00b140\", \"7CCDEF\", \"F05323\", \"FEDD00\", \"1A8…\n\n\n\n\nSetting the most recent year of data\nI’m creating an object called recent_year because at some point I’ll have new data and might want to just change the year.\n\nrecent_year &lt;- \"2025\"",
    "crumbs": [
      "Analysis 2025"
    ]
  },
  {
    "objectID": "02-analysis.html#players-with-highest-salaries",
    "href": "02-analysis.html#players-with-highest-salaries",
    "title": "Analysis 2025",
    "section": "Players with highest salaries",
    "text": "Players with highest salaries\n\nOver all time\nA searchable table of all players, all time.\n\nsal_high &lt;- salaries |&gt; \n  arrange(compensation |&gt; desc()) |&gt; \n  select(!c(club_long, conference))\n\nsal_high |&gt; datatable()\n\nWarning in instance$preRenderHook(instance): It seems your data is too big for\nclient-side DataTables. You may consider server-side processing:\nhttps://rstudio.github.io/DT/server.html\n\n\n\n\n\n\n\nData takeaway: Messi money\nUpon his signing on July 15, 2023, Lionel Messi became the highest paid player in the history of the MLS with a total compensation of $20.4 million. Lorenzo Insigne of Toronto was second at $15.5 million, the only other player earning more than $10 million within a year.\n\n\n\nIn most recent year\n\nsal_high_recent &lt;- salaries |&gt; \n  filter(year == recent_year) |&gt; \n  mutate(rank = min_rank(desc(compensation))) |&gt; \n  relocate(rank) |&gt; \n  arrange(compensation |&gt; desc()) |&gt; \n  select(!c(club_long, conference))\n\nsal_high_recent\n\n\n  \n\n\n\nTeams with more than one player from top 10\n\nsal_high_recent |&gt; \n  filter(rank &lt;= 10) |&gt; \n  count(club_short, sort = T) |&gt; \n  filter(n &gt; 1)\n\n\n  \n\n\n\n\nData takeaway: More than Messi\nInter Miami has three of the top 10 earners, while Toronto FC has two.\n\n\n\nDifference with just base pay in 2025?\nThis looks at just the base salary as opposed to total compensation. No great changes at the top of the list.\n\nsal_high_base &lt;- salaries |&gt; \n  arrange(base_salary |&gt; desc()) |&gt; \n  select(!c(club_long, conference, compensation))\n\nsal_high_base |&gt; filter(year == recent_year, base_salary &gt;= 2000000) \n\n\n  \n\n\n\n\n\nHightest paid on Austin FC\nSince we are in Austin, let’s see look at their 2025 roster spending.\n\nsal_high_recent |&gt; \n  filter(club_short == \"ATX\")\n\n\n  \n\n\n\nOwen Wolff has to be the best value on the team given he makes just over $220,000 and is a can’t-drop.",
    "crumbs": [
      "Analysis 2025"
    ]
  },
  {
    "objectID": "02-analysis.html#team-salaries",
    "href": "02-analysis.html#team-salaries",
    "title": "Analysis 2025",
    "section": "Team salaries",
    "text": "Team salaries\nWe’ll get per-year salaries by team, then look at just this year.\n\nHighest team salaries over time\nFirst get the total compensation for each team in each year.\n\nsal_team &lt;- salaries |&gt; \n  group_by(year, club_long) |&gt; \n  summarise(total_compensation = sum(compensation)) |&gt; \n  arrange(total_compensation |&gt; desc())\n\n# peek at the top\nsal_team |&gt; filter(total_compensation &gt; 20000000)\n\n\n  \n\n\n\nThen find the top team for each year.\n\ntop_sal_team_yr &lt;- salaries |&gt; \n  group_by(year, club_long) |&gt; \n  summarise(total_compensation = sum(compensation)) |&gt; \n  slice_max(total_compensation)\n\ntop_sal_team_yr\n\n\n  \n\n\n\nAnd note how often the teams have been the top spender.\n\ntop_sal_team_yr |&gt; \n  ungroup() |&gt; \n  tabyl(club_long) |&gt; \n  adorn_totals(\"row\") |&gt;\n  adorn_pct_formatting() |&gt; \n  as_tibble()\n\n\n  \n\n\n\n\nData takeaways: Toronto historically spends high\nLooking at the most expensive rosters in the MLS of time, Toronto FC has seen of the top 10 highest entries. Over the past 17 years, Toronto has been the top spending team seven times, or 40% of the time. The L.A. Galaxy is next with five highest-spending years.\n\n\n\nHighest salaries this year\nAnd let’s look at this year.\n\nsal_team_recent &lt;- sal_team |&gt; filter(year == recent_year)\n\n# peek\nsal_team_recent |&gt; head(10)\n\n\n  \n\n\n\n\nPrep data for chart\nLet’s round the numbers for our chart.\n\nsal_team_recent_mil &lt;- sal_team_recent |&gt; \n  mutate(total_millions = (total_compensation / 1000000) |&gt; round(1)) |&gt; \n  left_join(\n    mls_colors_data |&gt; select(club_long, favored_color, favored_nohex),\n    join_by(club_long)\n  ) |&gt;\n  drop_na(favored_color)\n\nsal_team_recent_mil\n\n\n  \n\n\n\n\n\nLet’s chart this\n\nsal_team_recent_mil_plot &lt;- sal_team_recent_mil |&gt; \n  ggplot(aes(\n    x = total_compensation,\n    y = club_long |&gt; reorder(total_compensation)\n  )) +\n  geom_col(fill = sal_team_recent_mil$favored_color) +\n  scale_x_continuous(labels = label_dollar(scale_cut = cut_long_scale()),\n                     limits = c(0,45000000)) +\n  # geom_text(aes(label = paste(\"$\", as.character(total_millions), sep = \"\")), color = \"black\", hjust = -.25) +\n  labs(\n    x = \"Total team spending in $ millions\",\n    y = \"\",\n    title = \"Messi makes Miami top MLS spender\",\n    subtitle = str_wrap(\"Salaries includes each player's base salary plus all signing and guaranteed bonuses annualized over the term of the player's contract, including option years.\"),\n    caption = \"By: Christian McDonald. Source: Major League Soccer Players Association\"\n  ) +\n  theme_minimal()\n\nggsave(\"figures/team-salary-recent.png\", width = 7, height = 7)\n\nWarning: Removed 1 row containing missing values or values outside the scale range\n(`geom_col()`).\n\n\n\nOne more look to see how many high-paid players on each team.\n\nsal_high_recent |&gt; \n  filter(compensation &gt;= 5000000) |&gt; \n  count(club_short, sort = T)\n\n\n  \n\n\n\n\n\nData Takeaway: Miami, Toronto tops\nGiven the historic signing of Lionel Messi in 2023, it is no surprise that Inter Miami have the highest team salary for the 2024 season. Toronto ranks second on the power of having two players making over $5 million, Lorenzo Insigne and Federico Bernardeschi.\n\n\n\nMore than Messi\nWhich teams pay their entire team less than what the highest player makes?\n\ntop_player &lt;- sal_high_recent |&gt; \n  filter(!is.na(club_short)) |&gt; \n  filter(rank == 1)\n\ntop_player_name &lt;- \n  paste(top_player$first_name, top_player$last_name)\n\nhighest_comp &lt;- top_player |&gt; \n  pull(compensation)\n\nmore_than_top &lt;- sal_high_recent |&gt; \n  filter(!is.na(club_short)) |&gt; \n  group_by(club_short) |&gt; \n  summarise(total_comp = sum(compensation, na.rm = T)) |&gt; \n  filter(total_comp &lt; highest_comp)\n\nmore_than_top_nrow &lt;- more_than_top |&gt; nrow()\n\nIn 2025 the highest paid player was Lionel Messi making $20,446,667. There are 21 teams that pay less than that for their entire roster.\n\n\nTeam spending over time\nLet’s look at team spending over the past five years. To do this, we have to create a ranking for the spending.\n\nI’m removing players not affiliated with teams\nWhen I added a third column to the group because I wanted to use long names for something, the ranking broke. I had to break the group then use the .by argument for rank().\n\n\nsal_team_rank &lt;- salaries |&gt; \n  filter(club_short != \"MLS\" | club_short |&gt; is.na()) |&gt; \n  group_by(year, club_short, club_long) |&gt; \n  summarise(\n    total_comp = sum(compensation, na.rm = TRUE)\n  ) |&gt; \n  arrange(year, total_comp |&gt; desc()) |&gt; \n1  ungroup() |&gt;\n2  mutate(rank = rank(-total_comp), .by = year)\n\n# peek\nsal_team_rank |&gt; head(20)\n\n\n1\n\nI break the group_by here.\n\n2\n\nThen I set the ranking to work by year.\n\n\n\n\n\n  \n\n\n\nVisualizing all of them would be tricky. Let’s do the top five over last five years.\n\nsal_team_rank_top &lt;- sal_team_rank |&gt; \n  filter(rank &lt;= 5,\n         year &gt;= (as.numeric(recent_year) - 4)) |&gt; \n  left_join(mls_colors_data |&gt; select(club_short, favored_color, favored_nohex), join_by(club_short))\n\nsal_team_rank_top |&gt; \n  filter(club_short == \"MIA\")\n\n\n  \n\n\n\nPeek at this a different way\n\nsal_team_rank_top |&gt; \n  select(-total_comp) |&gt; \n  pivot_wider(names_from = year, values_from = rank)\n\n\n  \n\n\n\n\n\nLet’s visualze spending rank\nWe are using\n\nsal_team_rank_top_plot &lt;- sal_team_rank_top |&gt; \n  ggplot(aes(x=year, y=rank, color = favored_color, group = club_short)) +\n  geom_point(size = 3) +\n  geom_line() +\n  scale_y_reverse() +\n  scale_color_identity(aes(color = favored_color)) +\n  geom_label_repel(aes(label = club_short), color = \"black\", size = 3) +\n  labs(\n    title = \"Miami's spending was increasing before Messi\",\nsubtitle = str_wrap(\"Maimi and the L.A. Galaxy are the only MLS teams to rank as a top five spender in each of the past five years. Miami's spending rank was climbing before Lionel Messi joined in 2023.\"),\n    color = \"Club\",\n    x = NULL,\n    y = \"Spending Rank\",\n    caption = \"By: Christian McDonald. Source: Major League Soccer Players Association\"\n  ) +\n  theme_minimal()\n\n\nggsave(\"figures/sal_team_rank.png\")\n\nSaving 7 x 5 in image\n\n\n\nLet’s count how many times each team is in this list.\n\nsal_team_rank_top |&gt; \n  count(club_long, sort = T)\n\n\n  \n\n\n\n\nData Takeaway: Miami and LA\nBoth Miami and the LA Galaxy have been among the top spending teams over the past five years. Toronto FC have been top spenders in four of the last five years.",
    "crumbs": [
      "Analysis 2025"
    ]
  },
  {
    "objectID": "99-mls-colors.html",
    "href": "99-mls-colors.html",
    "title": "MLS colors",
    "section": "",
    "text": "Here I’m trying out different API products to find colors to use in these charts. I end up creating my own color listings based on several sources because all the existing R sources are out of date or I don’t like their choices.\nThe results of this work ends up in a file that is used in the analysis notebook.\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(usfootballR)\nlibrary(teamcolors)\nlibrary(scales)",
    "crumbs": [
      "MLS colors"
    ]
  },
  {
    "objectID": "99-mls-colors.html#import",
    "href": "99-mls-colors.html#import",
    "title": "MLS colors",
    "section": "Import",
    "text": "Import\n\nGetting our data\n\nsalaries &lt;- read_rds(\"data-processed/mls-salaries.rds\")\n\nsalaries |&gt; glimpse()\n\nRows: 12,187\nColumns: 9\n$ year         &lt;chr&gt; \"2007\", \"2007\", \"2007\", \"2007\", \"2007\", \"2007\", \"2007\", \"…\n$ club_short   &lt;chr&gt; \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"CHI\", \"…\n$ last_name    &lt;chr&gt; \"Armas\", \"Banner\", \"Barrett\", \"Blanco\", \"Brown\", \"Busch\",…\n$ first_name   &lt;chr&gt; \"Chris\", \"Michael\", \"Chad\", \"Cuauhtemoc\", \"C.J.\", \"Jon\", …\n$ position     &lt;chr&gt; \"M\", \"M\", \"F\", \"F\", \"D\", \"GK\", \"F\", \"D\", \"M\", \"D\", \"D\", \"…\n$ base_salary  &lt;dbl&gt; 225000.0, 12900.0, 41212.5, 2492316.0, 106391.0, 58008.0,…\n$ compensation &lt;dbl&gt; 225000.0, 12900.0, 48712.5, 2666778.0, 106391.0, 58008.0,…\n$ club_long    &lt;chr&gt; \"Chicago Fire FC\", \"Chicago Fire FC\", \"Chicago Fire FC\", …\n$ conference   &lt;chr&gt; \"Eastern\", \"Eastern\", \"Eastern\", \"Eastern\", \"Eastern\", \"E…\n\n\nI need to make some data to use\n\nsal_team &lt;- salaries |&gt; \n  group_by(year, club_long) |&gt; \n  summarise(total_compensation = sum(compensation)) |&gt; \n  arrange(total_compensation |&gt; desc())\n\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n\nsal_team_rank &lt;- salaries |&gt; \n  filter(club_short != \"MLS\" | club_short |&gt; is.na()) |&gt; \n  group_by(year, club_short, club_long) |&gt; \n  summarise(\n    total_comp = sum(compensation, na.rm = TRUE)\n  ) |&gt; \n  arrange(year, total_comp |&gt; desc()) |&gt; \n  ungroup() |&gt;\n  mutate(rank = rank(-total_comp), .by = year)\n\n`summarise()` has grouped output by 'year', 'club_short'. You can override\nusing the `.groups` argument.\n\nsal_team_rank_top &lt;- sal_team_rank |&gt; \n  filter(rank &lt;= 5,\n         year &gt;= \"2020\")\n\nsal_team_rank_top",
    "crumbs": [
      "MLS colors"
    ]
  },
  {
    "objectID": "99-mls-colors.html#manual-colors",
    "href": "99-mls-colors.html#manual-colors",
    "title": "MLS colors",
    "section": "Manual colors",
    "text": "Manual colors\nMy attempt to make a record of MLS colors. This is based on TeamColorCodes but with additional column favored_color that is my best choice for charts. I’m building this in the same spreadsheet as my teams/seasons list but on a different sheet.\nI started with the list above fro usfootballr’s espn colors.\n\nDownload the data\n\n# download.file(\"https://docs.google.com/spreadsheets/d/e/2PACX-1vQqXJxbbrBsikirZrGyXYV_G6cFZp_dYmcf52UfSYM7Kw3akGlkO5jKP8ZL8WtRA5qUJgFMNPG8JYov/pub?output=csv&&gid=1348329208\", \"data-processed/clubs-colors.csv\")\n\n\n\nImport that data\n\nmls_colors_data &lt;- read_csv(\"data-processed/clubs-colors.csv\")\n\nRows: 30 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (7): club_short, club_long, primary_color, secondary_color, tertiary_col...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nmls_colors_data\n\n\n  \n\n\n\n\n\nPreview the colors\nThis chart is totally a Claude.ai chart. I startd with this prompt: “I want to use ggplot, or at least R, to print a color swatch based on a data frame like this” and listed some data. Claude said it can’t display R so it did it in React! So I asked “Can you guess at the ggplot code?” and it gave me what was below (as well as another alternative I didn’t like.) All I had to do is change the data frame name.\nThat said, I’ve made several modifications since.\n\n# Convert the data from wide to long format for plotting\nteams_long &lt;- mls_colors_data |&gt; \n  pivot_longer(\n    cols = !c(starts_with(\"club\")),\n    names_to = \"color_type\",\n    values_to = \"color_hex\"\n  ) |&gt; \n  # Clean up color_type names for display\n  mutate(\n    color_type = str_to_title(gsub(\"_color\", \"\", color_type)),\n    color_type = fct_relevel(color_type, \"Favored\", \"Primary\", \"Secondary\", \"Tertiary\"),\n    # Ensure all color codes have # prefix\n    color_hex = ifelse(startsWith(color_hex, \"#\"), \n                      color_hex, \n                      paste0(\"#\", color_hex))\n  )\n\nteams_long |&gt; slice_sample(n = 8) # I added this line\n\n\n  \n\n\n\nThen plot a visual of theses so I can check them.\n\n# Create the plot\nmls_team_colors_plot &lt;- ggplot(teams_long, \n       aes(x = color_type, \n           y = club_long)) +\n  geom_tile(aes(fill = color_hex), \n            color = \"gray80\",  # Add border to tiles\n            width = 0.9, \n            height = 0.9) +\n  scale_fill_identity() +  # Use actual hex colors\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    panel.grid = element_blank(),\n    plot.title = element_text(hjust = 0.5)\n  ) +\n  labs(\n    title = \"MLS Team Colors\",\n    x = \"Color Type\",\n    y = \"Team\"\n  )\n\nggsave(\"figures/mls_team_colors_plot.png\")\n\nSaving 7 x 5 in image\n\n\n\n\nI can use this to adjust the data on which is the favored_color. I’ll update the data and then charts that use that data will update when they are next downloaded and run.\n\n\n\nDo the salary chart\nI need to prepare the data so I can test it within a real chart.\n\nsal_team_2024_data &lt;- sal_team_rank |&gt; \n  filter(year == \"2024\") |&gt; \n  drop_na(club_short) |&gt; \n  left_join(mls_colors_data, join_by(club_short, club_long)) |&gt; \n  select(!c(primary_color, secondary_color, tertiary_color))\n\nsal_team_2024_data  \n\n\n  \n\n\n\nThen plot it.\nFor the life of me I can’t figure out how to reverse the team names to start with Atlanta.\n\nsal_top_2024_col_plot &lt;- sal_team_2024_data |&gt; \n  ggplot(aes(x = reorder(club_short, total_comp), y = total_comp)) +\n  # geom_col(color = sal_top_2023_col$color, fill = sal_top_2023_col$alternate_color) +\n  geom_col(fill = sal_team_2024_data$favored_color) +\n  scale_y_continuous(labels = label_dollar(scale = .000001, accuracy = 2),\n                     limits = c(0, 45000000)) +\n  # geom_text(aes(\n  #   label = dollar(total_comp, scale = .000001, accuracy = 3, digits = 2), hjust = -.25)\n  # ) +\n  coord_flip() +\n  labs(\n    title = \"Top five spending teams 2024\",\n    y = \"Total spending in $ millions\",\n    x = \"\"\n  ) \n\nggsave(\"figures/team-salary-2024-color-manual.png\")\n\nSaving 7 x 5 in image\n\n\n\n\n\n\n\n\n\nBefore manual\n\n\n\nBefore I settled on the manual process above, I tried some other R packages that included color values for MLS teams. Those results are below.",
    "crumbs": [
      "MLS colors"
    ]
  },
  {
    "objectID": "99-mls-colors.html#usfootballr-package",
    "href": "99-mls-colors.html#usfootballr-package",
    "title": "MLS colors",
    "section": "usfootballr package",
    "text": "usfootballr package\nHere I try to use the colors from the usfootballr package and apply them to a chart.\nHere is what comes from the package for teams:\n\nespn_teams &lt;- espn_mls_teams()\n\nespn_teams |&gt; head()\n\n\n  \n\n\n\nNow I want to use my ranking data to try and color bars based on data from the package.\n\nsal_top_2023 &lt;- sal_team_rank |&gt; left_join(espn_teams, join_by(club_short == abbreviation)) |&gt; \n  select(1:4, 11:12) |&gt; \n  filter(year == \"2023\")\n\nsal_top_2023_col &lt;- sal_top_2023 |&gt; \n  mutate(color = paste(\"#\", color, sep = \"\"),\n         alternate_color = paste(\"#\", alternate_color, sep = \"\")\n        ) |&gt; \n  drop_na()\n\nsal_top_2023_col\n\n\n  \n\n\n\nNow to plot with the color?\nThe geom_text label I was trying below needed a decimal point and not as much rounding, but I’m not going to figure that out right now.\n\nsal_top_2023_col_plot &lt;- sal_top_2023_col |&gt; \n  ggplot(aes(x = reorder(club_short, total_comp), y = total_comp)) +\n  # geom_col(color = sal_top_2023_col$color, fill = sal_top_2023_col$alternate_color) +\n  geom_col(fill = sal_top_2023_col$color) +\n  scale_y_continuous(labels = label_dollar(scale = .000001, accuracy = 2),\n                     limits = c(0, 40000000)) +\n  # geom_text(aes(\n  #   label = dollar(total_comp, scale = .000001, accuracy = 3, digits = 2), hjust = -.25)\n  # ) +\n  coord_flip() +\n  labs(\n    title = \"Top five spending teams 2023\",\n    y = \"Total spending in $ millions\",\n    x = \"\"\n  ) \n\nggsave(\"figures/team-salary-2023-color-usfootballr.png\")\n\nSaving 7 x 5 in image\n\n\n\nWhile this works and they have all the current teams, in some cases we would want the alternative color for a team if the main color is black or white.",
    "crumbs": [
      "MLS colors"
    ]
  },
  {
    "objectID": "99-mls-colors.html#teamcolors-package",
    "href": "99-mls-colors.html#teamcolors-package",
    "title": "MLS colors",
    "section": "teamcolors package",
    "text": "teamcolors package\nWe’ll try this, but from older data because they won’t have some teams.\n\nmls_colors &lt;- teamcolors |&gt; filter(league == \"mls\") |&gt; \n  select(1, 3:4)\n\nmls_colors_udpated &lt;- mls_colors |&gt; \n  mutate(club_long = recode(\n    name,\n    \"Chicago Fire\" = \"Chicago Fire FC\"\n  )) |&gt; select(-name)\n\nsal_team_2019 &lt;- sal_team |&gt; filter(year == 2019) |&gt;\n  left_join(mls_colors_udpated, join_by(club_long)) |&gt; \n1  drop_na(primary, secondary)\n\n\nsal_team_2019\n\n\n1\n\nI had to drop rows that didn’t have their color or this would break.\n\n\n\n\n\n  \n\n\n\n\nsal_team_2019  |&gt; \n  # drop_na(primary, secondary) |&gt; \n  ggplot(aes(y = club_long |&gt; reorder(total_compensation), x = total_compensation)) +\n  geom_col(fill = sal_team_2019$primary) +\n  scale_x_continuous(labels = label_dollar(scale = .00001, accuracy = 2)) +\n  geom_text(aes(\n    label = dollar(total_compensation, scale = .00001, accuracy = 2, digits = 3)),\n    color = \"white\", hjust = 1.25\n  ) +\n  labs(\n    title = \"Totally incomplete list of 2019 salaries\",\n    subtitle = \"Only includes clubs with color values in \\\"teamcolors\\\" package.\",\n    y = \"\",\n    x = \"Team spending in $ millions\"\n  )\n\n\n\n\n\n\n\nFigure 1: Incomplete team spending, 2019\n\n\n\n\n\nThe colors are much nicer here, but not all the teams are represented. It is at least four years out of date.",
    "crumbs": [
      "MLS colors"
    ]
  }
]